name: Deploy to EKS

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'k8s/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: dev-devops-practice-app
  EKS_CLUSTER_NAME: dev-eks-cluster

jobs:
  build-and-deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update deployment image with specific commit SHA tag
        kubectl set image deployment/devops-practice-app app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n default
        
        # Wait for rollout to complete
        kubectl rollout status deployment/devops-practice-app -n default --timeout=5m

    - name: Get Load Balancer URL
      run: |
        echo "Waiting for ALB to be provisioned..."
        sleep 30
        ALB_URL=$(kubectl get ingress devops-practice-app -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Application URL: http://$ALB_URL"
        echo "API Endpoint: http://$ALB_URL/api/hello"
        echo "Health Check: http://$ALB_URL/actuator/health"
